var documenterSearchIndex = {"docs":
[{"location":"locatorfuncs.html#Locator-Functions","page":"Locator Functions","title":"Locator Functions","text":"","category":"section"},{"location":"locatorfuncs.html#Locator-function-selector","page":"Locator Functions","title":"Locator function selector","text":"","category":"section"},{"location":"locatorfuncs.html","page":"Locator Functions","title":"Locator Functions","text":"cereal.locatorfunc","category":"page"},{"location":"locatorfuncs.html#cereal.locatorfunc","page":"Locator Functions","title":"cereal.locatorfunc","text":"Locator function\n\nlocatorfunc( N::Int , Method::String )\n\nThis function selects the locator function to use. The first argument N determines the minimum number of emission points that the locator function will use. N=4 or N≥5 is recommended. The second argument Method selects the formula or algorithm used to compute the intersection point X_c. The available methods are \"FHC21\", \"CFM10\", and for N≥5, \"RTC21\".\n\nBy default, the locator function assumes N=5 and Method=\"RTC21\":\n\njulia> locatorfunc() == locatorfunc(5,\"RTC21\")\ntrue\n\n\n\n\n\n","category":"function"},{"location":"locatorfuncs.html#Basic-method-functions","page":"Locator Functions","title":"Basic method functions","text":"","category":"section"},{"location":"locatorfuncs.html","page":"Locator Functions","title":"Locator Functions","text":"cereal.locator5RTC21","category":"page"},{"location":"locatorfuncs.html#cereal.locator5RTC21","page":"Locator Functions","title":"cereal.locator5RTC21","text":"Five point locator function (RTC21)\n\nlocator5RTC21( X::RealMtx )\n\nThe function presented here implements the five point relativistic  location formula given by Ruggiero, Tartaglia, and Casalino in  Ruggiero et al., arxiv:2111.13423 (2021).\n\n\n\n\n\n","category":"function"},{"location":"locatorfuncs.html","page":"Locator Functions","title":"Locator Functions","text":"cereal.locator4CFM10","category":"page"},{"location":"locatorfuncs.html#cereal.locator4CFM10","page":"Locator Functions","title":"cereal.locator4CFM10","text":"Four point locator function (CFM10)\n\nlocator4CFM10( X::RealMtx )\n\nThe function presented here implements the four point relativistic  location formula given by Coll, Ferrando, and Morales-Lladosa:\n\nX_c = X_4 + y_* - fracη(y_*y_*)η(y_*χ)Δ χ.\n\nSee Coll et al., Class.Quant.Grav. 27 (2010) 065013 and Coll et al.,  Phys. Rev. D 86, 084036 (2012) for details.\n\n\n\n\n\n","category":"function"},{"location":"locatorfuncs.html","page":"Locator Functions","title":"Locator Functions","text":"cereal.locator4FHC21","category":"page"},{"location":"locatorfuncs.html#cereal.locator4FHC21","page":"Locator Functions","title":"cereal.locator4FHC21","text":"Four point locator function (FHC21)\n\nlocator4FHC21( X::RealMtx )\n\nThis function implements the four point relativistic location algorithm of the authors based on performing transformations to adapted frames.\n\nThe algorithm is conceptually simple for a spacelike hyperplane:\n\nFind and perform a Lorentz transformation such that the four points  X_i (labeled with i{1,2,3,4}) have the same time coordinate in  the transformed frame. In the transformed frame, the four points  form a tetrahedron in space at some instant in time.\nAssuming the tetrahedron has finite volume, find the circumcenter and  circumradius. The circumcenter provides the spatial coordinates of  the intersection point in the new frame, and the circumradius  provides the time coordinate (via time of flight).\nTransform back to obtain the coordinates of the intersection point in  the original frame.\n\nThe computed point X_c should satisfy the four constraints dX_I^2=η_μν(X_c^μ-X^μ_I)(X_c^ν-X^ν_I)=0, where μ, ν are spacetime indices and η_μν is the Minkowski metric. \n\nThe case of a timelike hyperplane is conceptually similar, but more intricate:\n\nFind and perform a Lorentz transformation such that the four points  X_I (labeled with I {1,2,3,4}) lie on a plane P_z specified  by a z coordinate in the transformed frame. In the transformed  frame, the four points lie on an elliptic hyperboloid.\nFind the vertex of the hyperboloid, and the Minkowski distance R  from the vertex to a point on the hyperboloid. There are two  intersection points. The z coordinate for the intersection points  is a distance R in the direction normal to the P_z plane.\nTransform back to obtain the coordinates of the intersection point in  the original frame.\n\nThere are two intersection points in the case of a timelike hyperplane; this is known as the bifurcation problem (Coll et al., Phys. Rev. D 86, 084036 (2012)). The addition of a fifth emission point will in most cases permit the selection of a single emission point.\n\n\n\n\n\n","category":"function"},{"location":"locatorfuncs.html#Multi-locator-function","page":"Locator Functions","title":"Multi locator function","text":"","category":"section"},{"location":"locatorfuncs.html","page":"Locator Functions","title":"Locator Functions","text":"cereal.mlocator","category":"page"},{"location":"locatorfuncs.html#cereal.mlocator","page":"Locator Functions","title":"cereal.mlocator","text":"Multiple emission set locator\n\nmlocator( X::RealMtx , locator::Function , Nbase::Int , dual::Bool, q::Real )\n\nThis computes the intersection point X_c for a large number of emission points. Given an mn matrix X of n emission points, and a function locator designed to work with Nbasen emission points, this function is designed to minimize errors and solve the bifurcation problem when needed.\n\nFor locator functions designed to work with N = 4 emission points, the bifurcation problem is solved by way of a rudimentary clustering algorithm. The clustering algorithm sorts points according to their norms and identifies closely clustered points according to the differences between the neighbors of the sorted points, and the tolerance parameter q.\n\nIn all cases, the errors are minimized by sorting points according to their Minkowski norms and selecting the point with the smallest norm.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"index.html#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Relativistic positioning refers to the concept of establishing spacetime positions from proper time broadcasts emitted by a system of satellites. Central to relativistic positioning is the relativistic location location problem, which is the problem of finding the intersection of future pointing light cones from a collection of at least four emission points. cereal.jl contains a collection of functions for the relativistic location problem in flat spacetime. ","category":"page"},{"location":"index.html#Short-tutorial","page":"Home","title":"Short tutorial","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"To run the cereal code, one begins by generating a set of emission points with the following:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"( X , Xtar ) = cereal.ceval.pgen(Float64,5)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The quantity Xtar is a four component vector representing the true intersection point, and X is a 45 matrix consisting set of 4 column vectors representing the coordinates of the emission points. The emission points are constructed by finding points on the past light cone of the target point Xtar.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Three different methods for finding the intersection point have been implemented, which are represented by the strings CFM10, FHC21 and RTC21. The method RTC21 (see reference below) is recommended, but requires at least five emission points. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"To select the locator function associated with the method RTC21, use the cereal.locatorfunc function, which outputs the appropriate locator function:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"locator = cereal.locatorfunc(5,\"RTC21\")","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The first argument is the number of emission points; for the method RTC21, the value should be at least 5 (larger values yield functions which take additional points into consideration). Once the locator function is selected, one may feed the emission point matrix X into the locator function to obtain the intersection point Xc:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Xc = locator(X)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The intersection point may then be compared with Xtar:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Xc - Xtar","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"In most cases, the differences in the components should be on the order of the machine precision (10^-15 for the default floating point type Float64).","category":"page"},{"location":"index.html#Other-methods","page":"Home","title":"Other methods","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The methods CFM10, FHC21 are four point methods, the first argument of cereal.locatorfunc can have a value of at least 4. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"To try out the method CFM10, one may use the following command:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"locator4a = cereal.locatorfunc(4,\"CFM10\")","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"To try out the method FHC21, use:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"locator4b = cereal.locatorfunc(4,\"FHC21\")","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"If one increases the number of emission points, then the resulting functions take additional points into consideration:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"locator5a = cereal.locatorfunc(5,\"CFM10\")\n\nlocator5b = cereal.locatorfunc(5,\"FHC21\")","category":"page"},{"location":"index.html#References","page":"Home","title":"References","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"CFM10: Coll, B. and Ferrando, J. J. and Morales-Lladosa, J. A., Positioning Systems in Minkowski Space-Time: from Emission to Inertial Coordinates, Class. Quant. Grav. 27, 065013 (2010)   doi:10.1088/0264-9381/27/6/065013 [arXiv:0910.2568]","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"RTC21: Ruggiero, M. L., Tartaglia, A., Casalino, L., Geometric approach to the definition of emission coordinates, (2021)   [arXiv:2111.13423]","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"FHC21: Feng, J. C., Hejda, F., Carloni, S., Relativistic location algorithm in curved spacetime, (2021)   [In preparation]","category":"page"},{"location":"index.html#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"evaluation.html#Evaluation","page":"Evaluation","title":"Evaluation","text":"","category":"section"},{"location":"evaluation.html#Main-evaluation-function","page":"Evaluation","title":"Main evaluation function","text":"","category":"section"},{"location":"evaluation.html","page":"Evaluation","title":"Evaluation","text":"cereal.ceval.main","category":"page"},{"location":"evaluation.html#cereal.ceval.main","page":"Evaluation","title":"cereal.ceval.main","text":"Evaluation function\n\nmain( locator::Function , N::Number , q::Real , k::Number ,     \n      counter::Bool , usexgen::Bool )\n\nThis function tests the user specified locator function for N stochastically generated test cases. The results produced by the locator are compared (by way of the comp function) to the generated intersection points up to a threshold value of q. The variable k is the number of emission points to generate for each test case, and the variable usexgen replaces the function pgen with xgen for test case generation.\n\nExamples:\n\ncereal.ceval.main(cereal.locatorfunc(4,\"CFM10\"),1e5,1e-6,4)\n\ncereal.ceval.main(cereal.locatorfunc(4,\"FHC21\"),1e5,1e-6,4)\n\ncereal.ceval.main(cereal.locatorfunc(5,\"RTC21\"),1e5,1e-9,5)\n\ncereal.ceval.main(cereal.locatorfunc(6,\"RTC21\"),1e5,5e-13,6)\n\n\n\n\n\n","category":"function"},{"location":"evaluation.html#Test-case-generator-functions","page":"Evaluation","title":"Test case generator functions","text":"","category":"section"},{"location":"evaluation.html","page":"Evaluation","title":"Evaluation","text":"cereal.ceval.vgenerator","category":"page"},{"location":"evaluation.html#cereal.ceval.vgenerator","page":"Evaluation","title":"cereal.ceval.vgenerator","text":"Vector generator\n\nvgenerator( tpfl::DataType )\n\nThis function generates a random 3-vector of unit length. Returns a  three component vector.\n\n\n\n\n\n","category":"function"},{"location":"evaluation.html","page":"Evaluation","title":"Evaluation","text":"cereal.ceval.nullgen","category":"page"},{"location":"evaluation.html#cereal.ceval.nullgen","page":"Evaluation","title":"cereal.ceval.nullgen","text":"Null vector generator\n\nnullgen( tpfl::DataType )\n\nThis function generates a random past directed null vector. Returns a four component vector.\n\n\n\n\n\n","category":"function"},{"location":"evaluation.html","page":"Evaluation","title":"Evaluation","text":"cereal.ceval.pgen","category":"page"},{"location":"evaluation.html#cereal.ceval.pgen","page":"Evaluation","title":"cereal.ceval.pgen","text":"Intersection and emission point generator\n\npgen( tpfl::DataType , N::Int )\n\nThis function generates a point Xc and N random emission points (in a 4N matrix X) on the past null cone of Xc. Returns a tuple (X,Xc).\n\n\n\n\n\n","category":"function"},{"location":"evaluation.html","page":"Evaluation","title":"Evaluation","text":"cereal.ceval.xgen","category":"page"},{"location":"evaluation.html#cereal.ceval.xgen","page":"Evaluation","title":"cereal.ceval.xgen","text":"Restricted intersection and emission point generator\n\nxgen( xc::Real , r1::Real , r2::Real , N::Int )\n\nThis function generates a point Xc=[0;xc;0;0] and N random emission points (in a 4N matrix X) on the past null cone of Xc at a radius r such that r1<r<r2. Returns a tuple (X,Xc).\n\n\n\n\n\n","category":"function"},{"location":"evaluation.html#Test-examples","page":"Evaluation","title":"Test examples","text":"","category":"section"}]
}
