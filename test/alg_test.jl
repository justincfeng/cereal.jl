#-----------------------------------------------------------------------
#
#   EMISSION POINTS
#
#-----------------------------------------------------------------------

Xtar = [  1.8200814320137757 ; -1.1089514255044362  ; 
         -0.9652055011181394 ;  0.31960297831341844 ]

X = 
[  3.0924841691705875  3.050116857638452   3.011116991798529   3.034530130241044   -0.2735756460791594   0.8465386150170222   ; 
  -0.3223826949489379 -0.3936811270320728 -0.5502137985420859 -1.0007066421503639   0.984705652588499   -1.1089514255044362   ; 
  -0.947362921807435  -0.9281171145943884 -0.6390491446136833 -0.28464050973044197 -0.9652055011181394   0.008337315878614082 ; 
   1.3196029783134184  1.3196029783134184  1.3196029783134184  1.3196029783134184   0.31960297831341844  0.31960297831341844  ]

XS = copy(X)
XS[1,:] = ones(Float64,6)
   
XSc = [ 3.870494677479508  ; 0.9877690434886339 ; 
        1.7794159289604248 ; 1.1603071561476166 ]

#-----------------------------------------------------------------------
#
#   FHC22 TESTS
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
#   LORENTZ TRANSFORMATION TEST
#-----------------------------------------------------------------------

NV  = [1,0,0,0] + rand(4)/20
NV  = NV/cereal.mnorm(NV)
Λ   = cereal.LTM(NV)

@test Λ*NV ≈ [1,0,0,0] atol=1e-13

#-----------------------------------------------------------------------
#   Z ROTATION TEST
#-----------------------------------------------------------------------

mv    = rand(Float64,4)
mv[1] = zero(Float64)
mv    = mv/cereal.mnorm(mv)
Mz    = cereal.MRz(mv)

@test Mz*mv ≈ [0,0,0,1] atol=1e-13

#-----------------------------------------------------------------------
#   LROT TEST
#-----------------------------------------------------------------------

XR      = rand(Float64,4,4)

Xprime  = cereal.Lrot(XR,Λ)

Xp0 = zeros(Float64,4,4)

for i=1:4
    Xp0[:,i] = Xprime[:,i] - Λ*XR[:,i]
end

@test Xp0 ≈ zeros(Float64,4,4)  atol=1e-13

#-----------------------------------------------------------------------
#   NORMFLIPS TEST
#-----------------------------------------------------------------------

vx  = rand(Float64)
vy  = rand(Float64)
vz  = rand(Float64)

vn  = norm([vx;vy;vz])
vx  = vx/vn
vy  = vy/vn
vz  = vz/vn

vt  = rand(Float64)
o   = zero(Float64)

Vsl = [ vt ; vx ; vy ; vz ]

Vfl = [ one(Float64) ; vt*vx ; vt*vy ; vt*vz ]/cereal.mnorm(Vsl)

@test cereal.NormflipS( Vsl ) ≈ Vfl  atol=1e-13

#-----------------------------------------------------------------------
#   IPFINDER TEST
#-----------------------------------------------------------------------

ne = 4

@test cereal.IPFinderS(XS[:,3:6]) ≈ XSc atol=1e-13

if      norm(cereal.IPFinderT(X[:,1:4])[1]-Xtar) < 
        norm(cereal.IPFinderT(X[:,1:4])[2]-Xtar)
            @test cereal.IPFinderT(X[:,1:4])[1] ≈ Xtar atol=1e-11
elseif  norm(cereal.IPFinderT(X[:,1:4])[2]-Xtar) < 
        norm(cereal.IPFinderT(X[:,1:4])[1]-Xtar)
            @test cereal.IPFinderT(X[:,1:4])[2] ≈ Xtar atol=1e-11
end

#-----------------------------------------------------------------------
#   LOCATOR TEST
#-----------------------------------------------------------------------

q   = 5e-13

loc4a = cereal.locatorselect(4,"FHC22")

Xc4 = loc4a(X[:,1:4])
Sda = cereal.ceval.comp(q,Xc4[1],Xtar)
Sdb = cereal.ceval.comp(q,Xc4[2],Xtar)

@test Sda[1] == true || Sdb[1] == true

Xc4 = loc4a(X[:,3:6])
Sda = cereal.ceval.comp(q,Xc4[1],Xtar)
Sdb = cereal.ceval.comp(q,Xc4[2],Xtar)

@test Sda[1] == true || Sdb[1] == true

loc5a = cereal.locatorselect(5,"FHC22")

Xc  = loc5a(X[:,1:5])
Sd  = cereal.ceval.comp(q,Xc,Xtar)

@test Sd[1] == true

Xc  = loc5a(X[:,2:6])
Sd  = cereal.ceval.comp(q,Xc,Xtar)

@test Sd[1] == true


#-----------------------------------------------------------------------
#
#   CFM10 TESTS
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
#   FRAME TEST
#-----------------------------------------------------------------------

XF = [  1.0  1.0  1.0  1.0 ; 
        2.0  1.0  1.0  1.0 ; 
        1.0  2.0  1.0  1.0 ; 
        1.0  1.0  2.0  1.0 ]

E = cereal.Frame( XF )

@test E[2:4,:] ≈ Matrix(1.0*I(3))

#-----------------------------------------------------------------------
#   CONFVEC TEST
#-----------------------------------------------------------------------

χ = cereal.ConfVec(E)

@test χ ≈ [1.0 ; 0.0 ; 0.0 ; 0.0]

#-----------------------------------------------------------------------
#   AUXVEC TEST
#-----------------------------------------------------------------------

ξ = cereal.AuxVec(χ) 

@test cereal.η(ξ,χ) ≈ 1.0

#-----------------------------------------------------------------------
#   LOCATOR TEST
#-----------------------------------------------------------------------

loc4b = cereal.locatorselect(4,"CFM10")

Xc4 = loc4b(X[:,1:4])
Sda = cereal.ceval.comp(q,Xc4[1],Xtar)
Sdb = cereal.ceval.comp(q,Xc4[2],Xtar)

@test Sda[1] == true || Sdb[1] == true

Xc4 = loc4b(X[:,3:6])
Sda = cereal.ceval.comp(q,Xc4[1],Xtar)
Sdb = cereal.ceval.comp(q,Xc4[2],Xtar)

@test Sda[1] == true || Sdb[1] == true

loc5b = cereal.locatorselect(5,"CFM10")

Xc  = loc5b(X[:,1:5])
Sd  = cereal.ceval.comp(q,Xc,Xtar)

@test Sd[1] == true

loc5b = cereal.locatorselect(5,"CFM10")

Xc  = loc5b(X[:,2:6])
Sd  = cereal.ceval.comp(q,Xc,Xtar)

@test Sd[1] == true

#-----------------------------------------------------------------------
#
#   RTC21 TESTS
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
#   LOCATOR TEST
#-----------------------------------------------------------------------

loc5 = cereal.locatorselect(5,"RTC21")

Xc  = loc5(X[:,1:5])
Sd  = cereal.ceval.comp(q,Xc,Xtar)

@test Sd[1] == true

loc5 = cereal.locatorselect(5,"RTC21")

Xc  = loc5(X[:,2:6])
Sd  = cereal.ceval.comp(q,Xc,Xtar)

@test Sd[1] == true

